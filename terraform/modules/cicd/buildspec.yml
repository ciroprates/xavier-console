version: 0.2

env:
  variables:
    ENVIRONMENT: "prod"

phases:
  install:
    commands:
      - echo "Installing dependencies..."
      - yum update -y
      - yum install -y unzip python3 python3-pip jq yum-utils
      - rpm --import https://rpm.releases.hashicorp.com/gpg
      - yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
      - yum -y install terraform
      - pip3 install checkov

  pre_build:
    commands:
      - echo "Retrieving SSM parameters..."
      - cd terraform/environments/prod
      - aws ssm get-parameter --name "/terraform/vars" --with-decryption --query "Parameter.Value" --output text > terraform.tfvars
      - terraform init -input=false
      - terraform workspace select prod || terraform workspace new prod
      - aws ssm get-parameter --name "/prod/github/token" --with-decryption --query "Parameter.Value" --output text > github_token.txt
      - aws ssm get-parameter --name "/prod/github/owner" --with-decryption --query "Parameter.Value" --output text > github_owner.txt
      - export TF_VAR_github_token=$(cat github_token.txt)
      - export TF_VAR_github_owner=$(cat github_owner.txt)
      - rm github_token.txt github_owner.txt

  build:
    commands:
      - echo "Running Terraform plan and apply..."
      - terraform validate
      - checkov -d .
      - terraform plan -input=false -out=tfplan
      - terraform show -json tfplan > plan.json
      - |
        if [ "$ENVIRONMENT" = "prod" ]; then
          echo "Production deployment requires manual approval"
          aws codepipeline get-pipeline-state --name $PIPELINE_NAME
        else
          terraform apply -input=false -auto-approve tfplan
        fi

  post_build:
    commands:
      - echo "Cleaning up..."
      - rm -f terraform.tfvars
      - rm -f tfplan
      - rm -f plan.json

artifacts:
  files:
    - '**/*'
  name: terraform-${ENVIRONMENT}-$(date +%Y%m%d-%H%M%S)

cache:
  paths:
    - '/root/.terraform.d/**/*'
    - '/root/.cache/pip/**/*' 